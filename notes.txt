//update api
app.patch("/user/:id", async (req, res) => {
    const id = req.params?.id;
    const data = req.body;
    try {
        const ALLOWED_UPDATES = ["password", "gender", "skills", "about", "photoURL"];
        const isUpdateAllowed = Object.keys(data).every((k) => {
            return ALLOWED_UPDATES.includes(k);//you had to explicitly return it as you are using curly braces as arrow function only returns the value on its own for a single line of code when you donot apply curly braces so remember it got it 
        })
        if (!isUpdateAllowed) {
            throw new Error("Update not allowed");
        }
        if (data?.skills?.length > 15) {
            throw new Error("More than 15 skills are not allowed");
        }
        // await User.findByIdAndUpdate({ _id: id }, data);
        await User.findByIdAndUpdate(id, data, { runValidators: true });
        res.send("user data updated successfully");
    }
    catch (err) {
        res.status(400).send("INVALID UPDATE:" + err.message
        );
    }

})
// app.use("/admin", adminAuth);
// app.get("/user/login", (req, res) => {
//     res.send("logged in successfully");
// })
// //app.use("/user", userAuth);
// app.get("/admin/getAllData", (req, res) => {
//     res.send("data sent successfully");
// })
// app.get("/user/getUserData", userAuth, (req, res) => {//in case we only want to check auth for  this route
//     res.send("user data sent successfully");
// })

// app.get("/data", (req, res) => {
//some error occurred in db while fetching the data 
// //try {
// throw new error("njhuydxxcx");
// res.send("data sent");

// }
// catch (err) {
//     res.status(500).send("error occurred contact the support team")
// }
// })
//error handling
// app.use("/", (err, req, res, next) => {
//     if (err) {
//         res.status(500).send("Something went wrong");
//     }
// })
//delete api
app.delete("/user", async (req, res) => {
    const id = req.body.id;
    try {
        //await User.findByIdAndDelete({ _id: id });
        await User.findByIdAndDelete(id);//shorthand for above line
        res.send("user deleted successfully");
    }
    catch (err) {
        res.status(400).send("Something went wrong");
    }
})
//get user by email
app.get("/user", async (req, res) => {
    const email = req.body.emailId;
    const users = await User.find({ emailId: email });//users since we haven't put any restrictions yet on email,hence there could be more than one user with the same emailId in our db
    try {
        if (users.length === 0) {
            res.status(404).send("user not found");
        }
        else {
            res.send(users);
        }
    }
    catch (err) {
        res.status(400).send("Something went wrong");
    }
})